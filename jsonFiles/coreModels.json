{
  "arrays":{
    "basicArrays": {
      "matrixTest": {
        "description": "Used to test arrays of matrices.",
        "type": "Matrix4x4",
        "unit": "none",
        "size": "(math::max(1,(int32_t) get<parameters::rigidVolumes>().size()))",
        "kind": "individualData"
      },
      "position": {
        "description": "Stores the position of every particle in world space coordinates.",
        "type": "float4",
        "kind": "particleData",
        "unit": "SI::m",
        "size": 1,
        "swap": true,
        "resort": true
      },
      "acceleration": {
        "description": "Stores the acceleration of every particle. This value needs to be set to zero on every time step as the old value is resorted as the initial value for certain functions but this is not desirable in calculalting the new accelerations later in the timestep.",
        "type": "float4",
        "kind": "particleData",
        "unit": "SI::acceleration",
        "size": 1,
        "swap": true,
        "resort": true
      },
      "velocity": {
        "description": "Stores the velocity of every particle. The velocity of the previous timestep will be sorted as the initial value in the new timestep automatically.",
        "type": "float4",
        "kind": "particleData",
        "unit": "SI::velocity",
        "size": 1,
        "swap": true,
        "resort": true
      },
      "particle_type": {
        "description": "Stores the type of every particle. The type of the previous timestep will be sorted as the initial value in the new timestep automatically.",
        "type": "int",
        "kind": "particleData",
        "size": 1,
        "swap": true,
        "resort": true
      },
      "renderArray": {
        "description": "Stores the visualization information for every particle generated by the visualization module. This is a value ranging from 0 to 1 for easy visualization in OpenGL.",
        "type": "float4",
        "kind": "particleData",
        "size": 1,
        "swap": true,
        "resort": true
      },
      "debugArray": {
        "description": "Stores the visualization information for every particle generated by the visualization module. This is a value ranging from 0 to 1 for easy visualization in OpenGL.",
        "type": "float4",
        "kind": "particleData",
        "size": 1,
        "swap": true,
        "resort": true
      },
      "volume": {
        "description": "Stores the volume a particle represents based on the particle radius not the particle support radius.",
        "type": "float",
        "kind": "particleData",
        "size": 1,
        "unit": "SI::volume",
        "swap": true,
        "resort": true
      },
      "lifetime": {
        "description": "Stores the lifetime of a particle since it's creation, starts at 0 for emitted particles but particles created from adaptivity might start at values less than 0 for blending.",
        "type": "float",
        "kind": "particleData",
        "unit": "SI::s",
        "size": 1,
        "swap": true,
        "resort": true
      },
      "pressure": {
        "description": "Stores the pressure of a particle calculated by IISPH, DFSPH does not calculate the pressure directly.",
        "type": "float",
        "kind": "particleData",
        "unit": "SI::Pa",
        "size": 1,
        "swap": true,
        "resort": true,
        "depends_any": [
          { "modules::pressure": "IISPH" },
          { "modules::pressure": "IISPH17" },
          { "modules::pressure": "IISPH17_BAND_RB" },
          { "modules::pressure": "DFSPH" }
        ]
      },
      "density": {
        "description": "Stores the density of a particle, calculated in the density module. This value is not filtered by any shepard or related filters.",
        "type": "float",
        "unit": "void",
        "kind": "particleData",
        "size": 1,
        "swap": true,
        "resort": true
      },
      "fluidDensity": {
        "description": "Stores the density of a particle, calculated in the density module. This value is not filtered by any shepard or related filters.",
        "type": "float",
        "unit": "void",
        "kind": "particleData"
      },
      "particleIndex": {
        "description": "Used for selective functions",
        "type": "int32_t",
        "unit": "none",
        "kind": "particleData"
      },
      "particleIndexCompact": {
        "description": "Used for selective functions",
        "type": "int32_t",
        "unit": "none",
        "kind": "particleData"
      },
      "resortArray4": {
        "description": "Used for compact resorting",
        "type": "float4",
        "unit": "none",
        "kind": "particleData"
      },
      "resortArray": {
        "description": "Used for compact resorting",
        "type": "float",
        "unit": "none",
        "kind": "particleData"
      }
    }
  },
  "uniforms": {
    "modules": {
      "debug": {
        "name": "Used to enable/disable continuous adaptivity, requires surfaceDistance = true.",
        "type": "bool",
        "default": false
      }
    },
    "internal": {
      "neighborhood_kind": {
        "identifier": "neighborhood_kind",
        "name": "Internal value that represents the used neighborlist, not visible in the simulation as it is an enum.",
        "type": "neighbor_list",
        "unit": "none",
        "default": "neighbor_list::constrained",
        "visible": false
      },
      "dumpNextframe": {
        "identifier": "dumpNextframe",
        "name": "Internal value that represents the used launch configuration, not visible in the simulation as it is an enum.",
        "type": "int32_t",
        "unit": "none",
        "default": "0",
        "const": false
      },
      "dumpForSSSPH": {
        "identifier": "dumpForSSSPH",
        "name": "Internal value that represents the used launch configuration, not visible in the simulation as it is an enum.",
        "type": "int32_t",
        "unit": "none",
        "default": "0",
        "const": false
      },
      "target": {
        "identifier": "target",
        "name": "Internal value that represents the used launch configuration, not visible in the simulation as it is an enum.",
        "type": "launch_config",
        "unit": "none",
        "default": "launch_config::device",
        "visible": false
      },
      "hash_size": {
        "identifier": "hash_size",
        "name": "Internal value that represents the used morton code length, not visible in the simulation as it is an enum.",
        "type": "hash_length",
        "unit": "none",
        "default": "hash_length::bit_64",
        "visible": false
      },
      "cell_ordering": {
        "identifier": "cell_order",
        "name": "Internal value that represents the used cell ordering, not visible in the simulation as it is an enum.",
        "type": "cell_ordering",
        "unit": "none",
        "default": "cell_ordering::z_order",
        "visible": false
      },
      "cell_structure": {
        "identifier": "cell_structure",
        "name": "Internal value that represents the used cell structure, not visible in the simulation as it is an enum.",
        "type": "cell_structuring",
        "unit": "none",
        "default": "cell_structuring::hashed",
        "visible": false
      },
      "num_ptcls": {
        "identifier": "num_ptcls",
        "name": "Represents the current number of particles valid within the simulation.",
        "type": "int32_t",
        "default": "0u",
        "unit": "none"
      },
      "boundaryCounter": {
        "identifier": "boundaryCounter",
        "name": "Represents the number of active boundary planes.",
        "type": "int32_t",
        "default": "0u",
        "unit": "none"
      },
      "boundaryLUTSize": {
        "identifier": "boundaryLUTSize",
        "name": "Represents the size of the boundary LUT.",
        "type": "int32_t",
        "default": "0u",
        "unit": "none"
      },
      "frame": {
        "identifier": "frame",
        "name": "Represents the current frame where frame is the number of timesteps not related to any export fps.",
        "type": "int32_t",
        "default": "0u",
        "unit": "none"
      },
      "max_velocity": {
        "identifier": "max_velocity",
        "name": "Contains the length of the fastest particles velocity.",
        "unit": "SI::velocity",
        "type": "float",
        "default": "1.f"
      },
      "minAABB": {
        "identifier": "min_domain",
        "name": "Lower bound of the simulation domain. Calculated based on the boundary object and fluid domain",
        "unit": "SI::m",
        "type": "float3",
        "default": "0.f,0.f,0.f"
      },
      "maxAABB": {
        "identifier": "max_domain",
        "name": "Upper bound of the simulation domain. Calculated based on the boundary object and fluid domain",
        "unit": "SI::m",
        "type": "float3",
        "default": "0.f,0.f,0.f"
      },
      "minCoord": {
        "identifier": "min_coord",
        "name": "Lower bound of the particle coordinates. Based purely on the fluid domain.",
        "type": "float3",
        "unit": "SI::m",
        "default": "0.f,0.f,0.f"
      },
      "maxCoord": {
        "identifier": "max_coord",
        "name": "Upper bound of the particle coordinates. Based purely on the fluid domain.",
        "type": "float3",
        "unit": "SI::m",
        "default": "0.f,0.f,0.f"
      },
      "cellSize": {
        "identifier": "cell_size",
        "name": "Represents the size of a cell which depends on the lowest particle resolutions default support radius.",
        "type": "float3",
        "unit": "SI::m",
        "default": "0.f,0.f,0.f",
        "const": true
      },
      "gridSize": {
        "identifier": "grid_size",
        "name": "Represents the size of the active simulation domain in voxels. Not representative of the memory consumption with hashed methods.",
        "unit": "none",
        "type": "int3",
        "default": "0u,0u,0u"
      },
      "ptcl_spacing": {
        "identifier": "ptcl_spacing",
        "name": "Value used when creating particles on a hexagonal grid as a multiplier to the grid coordinates to achieve the most dense packing.",
        "unit": "SI::m",
        "type": "float",
        "default": "0.f"
      },
      "ptcl_support": {
        "identifier": "ptcl_support",
        "name": "Default support radius of the lowest resolution of particles.",
        "unit": "SI::m",
        "type": "float",
        "default": "0.f"
      },
      "config_file": {
        "identifier": "config_file",
        "name": "The file that was loaded to initialize the simulation.",
        "type": "std::string",
        "default": "DamBreakObstacle.json"
      },
      "config_folder": {
        "identifier": "config_folder",
        "name": "The path to the configuration file being used for the simulation.",
        "type": "std::string",
        "default": "D:/DamBreak"
      },
      "working_directory": {
        "identifier": "working_directory",
        "name": "The path to the configuration file being used for the simulation.",
        "type": "std::string",
        "default": "D:/DamBreak"
      },
      "build_directory": {
        "identifier": "build_directory",
        "name": "The path to the configuration file being used for the simulation.",
        "type": "std::string",
        "default": "D:/DamBreak"
      },
      "source_directory": {
        "identifier": "source_directory",
        "name": "The path to the configuration file being used for the simulation.",
        "type": "std::string",
        "default": "D:/DamBreak"
      },
      "binary_directory": {
        "identifier": "binary_directory",
        "name": "The path to the configuration file being used for the simulation.",
        "type": "std::string",
        "default": "D:/DamBreak"
      },
      "timestep": {
        "identifier": "timestep",
        "name": "The current timestep of the simulation defined by the CFL condition and the min/max timestep values.",
        "unit": "SI::s",
        "type": "float",
        "default": "0.f"
      },
      "simulationTime": {
        "identifier": "simulationTime",
        "name": "Represents the simulated time",
        "unit": "SI::s",
        "type": "float",
        "default": "0.f"
      }
    },
    "particle_settings": {
      "radius": {
        "identifier": "radius",
        "name": "Radius of the lowest resolution particles (in meters). Useful value: 0.5f.",
        "type": "float",
        "unit": "SI::m",
        "default": "0.5f"
      }
    },
    "simulation_settings": {
      "dumpFile": {
        "identifier": "dumpFile",
        "name": "Internal value that represents the used launch configuration, not visible in the simulation as it is an enum.",
        "type": "std::string",
        "unit": "none",
        "default": "simulation.dump",
        "const": false
      },
      "numptcls": {
        "identifier": "max_numptcls",
        "name": "Represents the maximum number of particles allowed in the simulation due to memory allocations.",
        "type": "int32_t",
        "default": "1000000u",
        "unit": "none"
      },
      "hash_entries": {
        "identifier": "hash_entries",
        "name": "Represents the size of the hash tables for compact hashing. Important: Choose a prime number.",
        "type": "uint32_t",
        "default": "UINT_MAX",
        "unit": "none"
      },
      "mlm_schemes": {
        "identifier": "mlm_schemes",
        "name": "Represents the levels of hash tables beign used for the MLM algorithm. Useful value: 3.",
        "type": "uint32_t",
        "default": "UINT_MAX",
        "unit": "none"
      },
      "deviceRegex": {
        "identifier": "deviceRegex",
        "name": "String used to create boundary walls around the domain described by the boundaryObject. Useful value: x+-y+-z+-.",
        "type": "std::string",
        "unit": "none",
        "const": false,
        "default": ""
      },
      "hostRegex": {
        "identifier": "hostRegex",
        "name": "String used to create boundary walls around the domain described by the boundaryObject. Useful value: x+-y+-z+-.",
        "type": "std::string",
        "unit": "none",
        "const": false,
        "default": ""
      },
      "debugRegex": {
        "identifier": "debugRegex",
        "name": "String used to create boundary walls around the domain described by the boundaryObject. Useful value: x+-y+-z+-.",
        "type": "std::string",
        "unit": "none",
        "const": false,
        "default": ""
      }
    }
  }
}    